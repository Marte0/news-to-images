import { FetchArgs, PostArgs, EResourceType } from 'rettiwt-core';
import { IRettiwtConfig } from '../../types/RettiwtConfig';
import { CursoredData } from '../../models/data/CursoredData';
import { Tweet } from '../../models/data/Tweet';
import { User } from '../../models/data/User';
/**
 * The base service that handles all HTTP requests.
 *
 * @internal
 */
export declare class FetcherService {
    /** The credential to use for authenticating against Twitter API. */
    private cred?;
    /** Whether the instance is authenticated or not. */
    private readonly isAuthenticated;
    /** The URL to the proxy server to use for authentication. */
    protected readonly authProxyUrl?: URL;
    /** The HTTPS Agent to use for requests to Twitter API. */
    private readonly httpsAgent;
    /** The max wait time for a response. */
    private readonly timeout;
    /** The log service instance to use to logging. */
    private readonly logger;
    /** The service used to handle HTTP and API errors */
    private readonly errorHandler;
    /**
     * @param config - The config object for configuring the Rettiwt instance.
     */
    constructor(config?: IRettiwtConfig);
    /**
     * Returns an AuthCredential generated using the given API key.
     *
     * @param apiKey - The API key to use for authenticating.
     * @returns The generated AuthCredential.
     */
    private getAuthCredential;
    /**
     * Returns an AuthCredential generated using the given guest key.
     *
     * @param guestKey - The guest key to use for authenticating as guest.
     * @returns The generated AuthCredential.
     */
    private getGuestCredential;
    /**
     * Checks the authorization status based on the requested resource.
     *
     * @param resourceType - The type of resource to fetch.
     * @throws An error if not authorized to access the requested resource.
     */
    private checkAuthorization;
    /**
     * Gets the HttpsAgent based on whether a proxy is used or not.
     *
     * @param proxyUrl - Optional URL with proxy configuration to use for requests to Twitter API.
     * @returns The HttpsAgent to use.
     */
    private getHttpsAgent;
    /**
     * Makes an HTTP request according to the given parameters.
     *
     * @typeParam ResType - The type of the returned response data.
     * @param config - The request configuration.
     * @returns The response received.
     */
    private request;
    /**
     * Extracts the required data based on the type of resource passed as argument.
     *
     * @param data - The data from which extraction is to be done.
     * @param type - The type of data to extract.
     * @returns The extracted data.
     */
    private extractData;
    /**
     * Deserializes the extracted data into a cursored list.
     *
     * @param extractedData - The list of extracted data.
     * @param next - The cursor to the next batch of data.
     * @returns The cursored data object.
     */
    private deserializeData;
    /**
     * Fetches the requested resource from Twitter and returns it after processing.
     *
     * @param resourceType - The type of resource to fetch.
     * @param args - Resource specific arguments.
     * @typeParam OutType - The type of deserialized data returned.
     * @returns The processed data requested from Twitter.
     */
    protected fetch<OutType extends Tweet | User>(resourceType: EResourceType, args: FetchArgs): Promise<CursoredData<OutType>>;
    /**
     * Posts the requested resource to Twitter and returns the response.
     *
     * @param resourceType - The type of resource to post.
     * @param args - Resource specific arguments.
     * @returns Whether posting was successful or not.
     */
    protected post(resourceType: EResourceType, args: PostArgs): Promise<boolean>;
    /**
     * Uploads the given media file to Twitter
     *
     * @param media - The path to the media file to upload.
     * @returns The id of the uploaded media.
     */
    protected upload(media: string): Promise<string>;
}
