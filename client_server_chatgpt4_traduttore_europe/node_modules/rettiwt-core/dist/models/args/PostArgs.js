"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadArgs = exports.MediaArgs = exports.TweetArgs = exports.PostArgs = void 0;
// PACKAGES
var class_validator_1 = require("class-validator");
// ENUMS
var Resources_1 = require("../../enums/Resources");
var Request_1 = require("../../enums/Request");
// MODELS
var DataValidationError_1 = require("../errors/DataValidationError");
/**
 * User set query parameters that are used to specify the data that is to be posted.
 *
 * @public
 */
var PostArgs = exports.PostArgs = /** @class */ (function () {
    /**
     * @param resourceType - The type of resource that is targeted.
     * @param args - The additional user-defined arguments for posting the resource.
     */
    function PostArgs(resourceType, args) {
        this.id = args.id;
        this.tweet = args.tweet ? new TweetArgs(args.tweet) : undefined;
        this.upload = args.upload ? new UploadArgs(args.upload) : undefined;
        // Validating this object
        var validationResult = (0, class_validator_1.validateSync)(this, { groups: [resourceType] });
        // If valiation error occured
        if (validationResult.length) {
            throw new DataValidationError_1.DataValidationError(validationResult);
        }
    }
    __decorate([
        (0, class_validator_1.IsOptional)(),
        (0, class_validator_1.IsNotEmpty)({ groups: [Resources_1.EResourceType.FAVORITE_TWEET, Resources_1.EResourceType.CREATE_RETWEET] }),
        (0, class_validator_1.IsNumberString)(undefined, { groups: [Resources_1.EResourceType.FAVORITE_TWEET, Resources_1.EResourceType.CREATE_RETWEET] }),
        __metadata("design:type", String)
    ], PostArgs.prototype, "id", void 0);
    __decorate([
        (0, class_validator_1.IsOptional)(),
        (0, class_validator_1.IsNotEmpty)({ groups: [Resources_1.EResourceType.CREATE_TWEET] }),
        (0, class_validator_1.IsObject)({ groups: [Resources_1.EResourceType.CREATE_TWEET] }),
        __metadata("design:type", TweetArgs)
    ], PostArgs.prototype, "tweet", void 0);
    __decorate([
        (0, class_validator_1.IsOptional)(),
        (0, class_validator_1.IsNotEmpty)({ groups: [Resources_1.EResourceType.MEDIA_UPLOAD] }),
        (0, class_validator_1.IsObject)({ groups: [Resources_1.EResourceType.MEDIA_UPLOAD] }),
        __metadata("design:type", UploadArgs)
    ], PostArgs.prototype, "upload", void 0);
    return PostArgs;
}());
/**
 * User set query parameters that are used to specify the tweet that is to be posted.
 *
 * @public
 */
var TweetArgs = exports.TweetArgs = /** @class */ (function () {
    /**
     * @param args - The additional user-defined arguments for posting the resource.
     */
    function TweetArgs(args) {
        this.text = args.text;
        this.media = args.media ? args.media.map(function (item) { return new MediaArgs(item); }) : undefined;
        this.replyTo = args.replyTo;
        // Validating this object
        var validationResult = (0, class_validator_1.validateSync)(this);
        // If valiation error occured
        if (validationResult.length) {
            throw new DataValidationError_1.DataValidationError(validationResult);
        }
    }
    __decorate([
        (0, class_validator_1.IsNotEmpty)(),
        (0, class_validator_1.IsString)(),
        (0, class_validator_1.MaxLength)(280),
        __metadata("design:type", String)
    ], TweetArgs.prototype, "text", void 0);
    __decorate([
        (0, class_validator_1.IsOptional)(),
        (0, class_validator_1.IsArray)(),
        (0, class_validator_1.ArrayMaxSize)(4),
        (0, class_validator_1.IsObject)({ each: true }),
        __metadata("design:type", Array)
    ], TweetArgs.prototype, "media", void 0);
    __decorate([
        (0, class_validator_1.IsOptional)(),
        (0, class_validator_1.IsNumberString)(),
        __metadata("design:type", String)
    ], TweetArgs.prototype, "replyTo", void 0);
    return TweetArgs;
}());
/**
 * User set query parameters that are used to specify the details of the media to be uploaded.
 *
 * @public
 */
var MediaArgs = exports.MediaArgs = /** @class */ (function () {
    /**
     * @param args - The media arguments specifying the media.
     */
    function MediaArgs(args) {
        var _a;
        this.id = args.id;
        this.tags = (_a = args.tags) !== null && _a !== void 0 ? _a : [];
        // Validating this object
        var validationResult = (0, class_validator_1.validateSync)(this);
        // If validation error occured
        if (validationResult.length) {
            throw new DataValidationError_1.DataValidationError(validationResult);
        }
    }
    __decorate([
        (0, class_validator_1.IsNotEmpty)(),
        (0, class_validator_1.IsNumberString)(),
        __metadata("design:type", String)
    ], MediaArgs.prototype, "id", void 0);
    __decorate([
        (0, class_validator_1.IsOptional)(),
        (0, class_validator_1.IsArray)(),
        (0, class_validator_1.ArrayMaxSize)(10),
        (0, class_validator_1.IsNumberString)(undefined, { each: true }),
        __metadata("design:type", Array)
    ], MediaArgs.prototype, "tags", void 0);
    return MediaArgs;
}());
/**
 * User set query parameters that are used while uploading a media file.
 *
 * @public
 */
var UploadArgs = exports.UploadArgs = /** @class */ (function () {
    /**
     * @param args - The upload arguments for uploading the media file.
     */
    function UploadArgs(args) {
        this.step = args.step;
        this.size = args.size;
        this.media = args.media;
        this.id = args.id;
        // Validating this object
        var validationResult = (0, class_validator_1.validateSync)(this, { groups: [args.step] });
        // If validation error occured
        if (validationResult.length) {
            throw new DataValidationError_1.DataValidationError(validationResult);
        }
    }
    __decorate([
        (0, class_validator_1.IsNotEmpty)(),
        __metadata("design:type", String)
    ], UploadArgs.prototype, "step", void 0);
    __decorate([
        (0, class_validator_1.IsOptional)(),
        (0, class_validator_1.IsNotEmpty)({ groups: [Request_1.EUploadSteps.INITIALIZE] }),
        (0, class_validator_1.Max)(5242880, { groups: [Request_1.EUploadSteps.INITIALIZE] }),
        __metadata("design:type", Number)
    ], UploadArgs.prototype, "size", void 0);
    __decorate([
        (0, class_validator_1.IsOptional)(),
        (0, class_validator_1.IsNotEmpty)({ groups: [Request_1.EUploadSteps.APPEND] }),
        __metadata("design:type", String)
    ], UploadArgs.prototype, "media", void 0);
    __decorate([
        (0, class_validator_1.IsOptional)(),
        (0, class_validator_1.IsNotEmpty)({ groups: [Request_1.EUploadSteps.APPEND, Request_1.EUploadSteps.FINALIZE] }),
        (0, class_validator_1.IsNumberString)(undefined, { groups: [Request_1.EUploadSteps.APPEND, Request_1.EUploadSteps.FINALIZE] }),
        __metadata("design:type", String)
    ], UploadArgs.prototype, "id", void 0);
    return UploadArgs;
}());
//# sourceMappingURL=PostArgs.js.map