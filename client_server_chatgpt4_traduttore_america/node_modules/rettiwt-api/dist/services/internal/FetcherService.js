"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FetcherService = void 0;
// PACKAGES
var rettiwt_core_1 = require("rettiwt-core");
var axios_1 = __importDefault(require("axios"));
var https_1 = __importDefault(require("https"));
var rettiwt_auth_1 = require("rettiwt-auth");
var https_proxy_agent_1 = require("https-proxy-agent");
// SERVICES
var ErrorService_1 = require("./ErrorService");
var LogService_1 = require("./LogService");
// ENUMS
var Api_1 = require("../../enums/Api");
var Logging_1 = require("../../enums/Logging");
// MODELS
var CursoredData_1 = require("../../models/data/CursoredData");
var Tweet_1 = require("../../models/data/Tweet");
var User_1 = require("../../models/data/User");
// HELPERS
var JsonUtils_1 = require("../../helper/JsonUtils");
var fs_1 = require("fs");
/**
 * The base service that handles all HTTP requests.
 *
 * @internal
 */
var FetcherService = /** @class */ (function () {
    /**
     * @param config - The config object for configuring the Rettiwt instance.
     */
    function FetcherService(config) {
        var _a, _b, _c;
        // If API key is supplied
        if (config === null || config === void 0 ? void 0 : config.apiKey) {
            this.cred = this.getAuthCredential(config.apiKey);
        }
        // If guest key is supplied
        else if (config === null || config === void 0 ? void 0 : config.guestKey) {
            this.cred = this.getGuestCredential(config.guestKey);
        }
        // If no key is supplied
        else {
            this.cred = undefined;
        }
        this.isAuthenticated = (config === null || config === void 0 ? void 0 : config.apiKey) ? true : false;
        this.authProxyUrl = (_a = config === null || config === void 0 ? void 0 : config.authProxyUrl) !== null && _a !== void 0 ? _a : config === null || config === void 0 ? void 0 : config.proxyUrl;
        this.httpsAgent = this.getHttpsAgent(config === null || config === void 0 ? void 0 : config.proxyUrl);
        this.timeout = (_b = config === null || config === void 0 ? void 0 : config.timeout) !== null && _b !== void 0 ? _b : 0;
        this.logger = new LogService_1.LogService(config === null || config === void 0 ? void 0 : config.logging);
        this.errorHandler = (_c = config === null || config === void 0 ? void 0 : config.errorHandler) !== null && _c !== void 0 ? _c : new ErrorService_1.ErrorService();
    }
    /**
     * Returns an AuthCredential generated using the given API key.
     *
     * @param apiKey - The API key to use for authenticating.
     * @returns The generated AuthCredential.
     */
    FetcherService.prototype.getAuthCredential = function (apiKey) {
        // Converting apiKey from base64 to string
        apiKey = Buffer.from(apiKey, 'base64').toString('ascii');
        return new rettiwt_auth_1.AuthCredential(apiKey.split(';'));
    };
    /**
     * Returns an AuthCredential generated using the given guest key.
     *
     * @param guestKey - The guest key to use for authenticating as guest.
     * @returns The generated AuthCredential.
     */
    FetcherService.prototype.getGuestCredential = function (guestKey) {
        return new rettiwt_auth_1.AuthCredential(undefined, guestKey);
    };
    /**
     * Checks the authorization status based on the requested resource.
     *
     * @param resourceType - The type of resource to fetch.
     * @throws An error if not authorized to access the requested resource.
     */
    FetcherService.prototype.checkAuthorization = function (resourceType) {
        // Logging
        this.logger.log(Logging_1.ELogActions.AUTHORIZATION, { authenticated: this.isAuthenticated });
        // Checking authorization status
        if (resourceType != rettiwt_core_1.EResourceType.TWEET_DETAILS &&
            resourceType != rettiwt_core_1.EResourceType.USER_DETAILS &&
            resourceType != rettiwt_core_1.EResourceType.USER_TWEETS &&
            this.isAuthenticated == false) {
            throw new Error(Api_1.EApiErrors.RESOURCE_NOT_ALLOWED);
        }
    };
    /**
     * Gets the HttpsAgent based on whether a proxy is used or not.
     *
     * @param proxyUrl - Optional URL with proxy configuration to use for requests to Twitter API.
     * @returns The HttpsAgent to use.
     */
    FetcherService.prototype.getHttpsAgent = function (proxyUrl) {
        if (proxyUrl) {
            return new https_proxy_agent_1.HttpsProxyAgent(proxyUrl);
        }
        return new https_1.default.Agent();
    };
    /**
     * Makes an HTTP request according to the given parameters.
     *
     * @typeParam ResType - The type of the returned response data.
     * @param config - The request configuration.
     * @returns The response received.
     */
    FetcherService.prototype.request = function (config) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var _b, _c;
            var _this = this;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        // Checking authorization for the requested resource
                        this.checkAuthorization(config.url);
                        // If not authenticated, use guest authentication
                        _b = this;
                        if (!((_a = this.cred) !== null && _a !== void 0)) return [3 /*break*/, 1];
                        _c = _a;
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, new rettiwt_auth_1.Auth({ proxyUrl: this.authProxyUrl }).getGuestCredential()];
                    case 2:
                        _c = (_d.sent());
                        _d.label = 3;
                    case 3:
                        // If not authenticated, use guest authentication
                        _b.cred = _c;
                        // Setting additional request parameters
                        config.headers = __assign(__assign({}, config.headers), this.cred.toHeader());
                        config.httpAgent = this.httpsAgent;
                        config.httpsAgent = this.httpsAgent;
                        config.timeout = this.timeout;
                        return [4 /*yield*/, (0, axios_1.default)(config).catch(function (error) {
                                _this.errorHandler.handle(error);
                                throw error;
                            })];
                    case 4: 
                    /**
                     * If Axios request results in an error, catch it and rethrow a more specific error.
                     */
                    return [2 /*return*/, _d.sent()];
                }
            });
        });
    };
    /**
     * Extracts the required data based on the type of resource passed as argument.
     *
     * @param data - The data from which extraction is to be done.
     * @param type - The type of data to extract.
     * @returns The extracted data.
     */
    FetcherService.prototype.extractData = function (data, type) {
        var _a;
        /**
         * The required extracted data.
         */
        var required = [];
        if (type == rettiwt_core_1.EResourceType.TWEET_DETAILS) {
            required = (0, JsonUtils_1.findByFilter)(data, '__typename', 'Tweet');
        }
        else if (type == rettiwt_core_1.EResourceType.USER_DETAILS || type == rettiwt_core_1.EResourceType.USER_DETAILS_BY_ID) {
            required = (0, JsonUtils_1.findByFilter)(data, '__typename', 'User');
        }
        else if (type == rettiwt_core_1.EResourceType.TWEET_SEARCH ||
            type == rettiwt_core_1.EResourceType.USER_LIKES ||
            type == rettiwt_core_1.EResourceType.LIST_TWEETS ||
            type == rettiwt_core_1.EResourceType.USER_TWEETS ||
            type == rettiwt_core_1.EResourceType.USER_TWEETS_AND_REPLIES) {
            required = (0, JsonUtils_1.findByFilter)(data, '__typename', 'TimelineTweet').map(function (item) { return item.tweet_results.result; });
        }
        else if (type == rettiwt_core_1.EResourceType.TWEET_FAVORITERS ||
            type == rettiwt_core_1.EResourceType.TWEET_RETWEETERS ||
            type == rettiwt_core_1.EResourceType.USER_FOLLOWERS ||
            type == rettiwt_core_1.EResourceType.USER_FOLLOWING) {
            required = (0, JsonUtils_1.findByFilter)(data, '__typename', 'TimelineUser').map(function (item) { return item.user_results.result; });
        }
        return {
            required: required,
            next: (_a = (0, JsonUtils_1.findByFilter)(data, 'cursorType', 'Bottom')[0]) === null || _a === void 0 ? void 0 : _a.value,
        };
    };
    /**
     * Deserializes the extracted data into a cursored list.
     *
     * @param extractedData - The list of extracted data.
     * @param next - The cursor to the next batch of data.
     * @returns The cursored data object.
     */
    FetcherService.prototype.deserializeData = function (extractedData, next) {
        if (extractedData === void 0) { extractedData = []; }
        if (next === void 0) { next = ''; }
        /** The list of deserialized data. */
        var deserializedList = [];
        // Deserializing the extracted raw data and storing it in the list
        for (var _i = 0, extractedData_1 = extractedData; _i < extractedData_1.length; _i++) {
            var item = extractedData_1[_i];
            // If the item is a valid raw tweet
            if (item && item.__typename == 'Tweet' && item.rest_id) {
                // Logging
                this.logger.log(Logging_1.ELogActions.DESERIALIZE, { type: item.__typename, id: item.rest_id });
                // Adding deserialized Tweet to list
                deserializedList.push(new Tweet_1.Tweet(item));
            }
            // If the item is a valid raw user
            else if (item && item.__typename == 'User' && item.rest_id && item.id) {
                // Logging
                this.logger.log(Logging_1.ELogActions.DESERIALIZE, { type: item.__typename, id: item.rest_id });
                // Adding deserialized User to list
                deserializedList.push(new User_1.User(item));
            }
        }
        return new CursoredData_1.CursoredData(deserializedList, next);
    };
    /**
     * Fetches the requested resource from Twitter and returns it after processing.
     *
     * @param resourceType - The type of resource to fetch.
     * @param args - Resource specific arguments.
     * @typeParam OutType - The type of deserialized data returned.
     * @returns The processed data requested from Twitter.
     */
    FetcherService.prototype.fetch = function (resourceType, args) {
        return __awaiter(this, void 0, void 0, function () {
            var request, res, extractedData, deserializedData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Logging
                        this.logger.log(Logging_1.ELogActions.FETCH, { resourceType: resourceType, args: args });
                        request = new rettiwt_core_1.Request(resourceType, args).toAxiosRequestConfig();
                        return [4 /*yield*/, this.request(request).then(function (res) { return res.data; })];
                    case 1:
                        res = _a.sent();
                        extractedData = this.extractData(res, resourceType);
                        deserializedData = this.deserializeData(extractedData.required, extractedData.next);
                        return [2 /*return*/, deserializedData];
                }
            });
        });
    };
    /**
     * Posts the requested resource to Twitter and returns the response.
     *
     * @param resourceType - The type of resource to post.
     * @param args - Resource specific arguments.
     * @returns Whether posting was successful or not.
     */
    FetcherService.prototype.post = function (resourceType, args) {
        return __awaiter(this, void 0, void 0, function () {
            var request;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Logging
                        this.logger.log(Logging_1.ELogActions.POST, { resourceType: resourceType, args: args });
                        request = new rettiwt_core_1.Request(resourceType, args).toAxiosRequestConfig();
                        // Posting the data
                        return [4 /*yield*/, this.request(request)];
                    case 1:
                        // Posting the data
                        _a.sent();
                        return [2 /*return*/, true];
                }
            });
        });
    };
    /**
     * Uploads the given media file to Twitter
     *
     * @param media - The path to the media file to upload.
     * @returns The id of the uploaded media.
     */
    FetcherService.prototype.upload = function (media) {
        return __awaiter(this, void 0, void 0, function () {
            var id;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // INITIALIZE
                        // Logging
                        this.logger.log(Logging_1.ELogActions.UPLOAD, { step: rettiwt_core_1.EUploadSteps.INITIALIZE });
                        return [4 /*yield*/, this.request(new rettiwt_core_1.Request(rettiwt_core_1.EResourceType.MEDIA_UPLOAD, {
                                upload: { step: rettiwt_core_1.EUploadSteps.INITIALIZE, size: (0, fs_1.statSync)(media).size },
                            }).toAxiosRequestConfig())];
                    case 1:
                        id = (_a.sent()).data.media_id_string;
                        // APPEND
                        // Logging
                        this.logger.log(Logging_1.ELogActions.UPLOAD, { step: rettiwt_core_1.EUploadSteps.APPEND });
                        return [4 /*yield*/, this.request(new rettiwt_core_1.Request(rettiwt_core_1.EResourceType.MEDIA_UPLOAD, {
                                upload: { step: rettiwt_core_1.EUploadSteps.APPEND, id: id, media: media },
                            }).toAxiosRequestConfig())];
                    case 2:
                        _a.sent();
                        // FINALIZE
                        // Logging
                        this.logger.log(Logging_1.ELogActions.UPLOAD, { step: rettiwt_core_1.EUploadSteps.APPEND });
                        return [4 /*yield*/, this.request(new rettiwt_core_1.Request(rettiwt_core_1.EResourceType.MEDIA_UPLOAD, {
                                upload: { step: rettiwt_core_1.EUploadSteps.FINALIZE, id: id },
                            }).toAxiosRequestConfig())];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, id];
                }
            });
        });
    };
    return FetcherService;
}());
exports.FetcherService = FetcherService;
//# sourceMappingURL=FetcherService.js.map