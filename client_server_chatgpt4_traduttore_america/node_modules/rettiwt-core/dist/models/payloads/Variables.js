"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReplyVariable = exports.MediaEntityVariable = exports.MediaVariable = exports.Variables = void 0;
// ENUMS
var Resources_1 = require("../../enums/Resources");
/**
 * Mandatory variables that must be sent as a URL-encoded, stringified-JSON.
 *
 * @public
 */
var Variables = /** @class */ (function () {
    /* eslint-enable @typescript-eslint/naming-convention */
    /**
     * @param resourceType - The type of resource that is requested.
     * @param args - The additional user-defined arguments for fetching the resource.
     */
    function Variables(resourceType, args) {
        var _a, _b, _c;
        // Conditionally initializing variables
        if (resourceType == Resources_1.EResourceType.CREATE_TWEET) {
            this.tweet_text = (_a = args.tweet) === null || _a === void 0 ? void 0 : _a.text;
            this.media = ((_b = args.tweet) === null || _b === void 0 ? void 0 : _b.media) ? new MediaVariable(args.tweet.media) : undefined;
            this.reply = ((_c = args.tweet) === null || _c === void 0 ? void 0 : _c.replyTo) ? new ReplyVariable(args.tweet.replyTo) : undefined;
        }
        else if (resourceType == Resources_1.EResourceType.CREATE_RETWEET || resourceType == Resources_1.EResourceType.FAVORITE_TWEET) {
            this.tweet_id = args.id;
        }
        else if (resourceType == Resources_1.EResourceType.LIST_DETAILS) {
            this.listId = args.id;
        }
        else if (resourceType == Resources_1.EResourceType.LIST_TWEETS) {
            this.listId = args.id;
            this.count = args.count;
            this.cursor = args.cursor;
        }
        else if (resourceType == Resources_1.EResourceType.SPACE_DETAILS_BY_ID) {
            this.id = args.id;
            this.isMetatagsQuery = false;
            this.withReplays = true;
            this.withListeners = true;
        }
        else if (resourceType == Resources_1.EResourceType.TWEET_SEARCH && args.filter) {
            this.rawQuery = args.filter.toString();
            this.count = args.count;
            this.cursor = args.cursor;
            this.product = 'Latest';
        }
        else if (resourceType == Resources_1.EResourceType.TWEET_DETAILS) {
            this.tweetId = args.id;
            this.includePromotedContent = false;
            this.withCommunity = false;
            this.withVoice = false;
        }
        else if (resourceType == Resources_1.EResourceType.TWEET_FAVORITERS || resourceType == Resources_1.EResourceType.TWEET_RETWEETERS) {
            this.tweetId = args.id;
            this.count = args.count;
            this.cursor = args.cursor;
            this.includePromotedContent = false;
        }
        else if (resourceType == Resources_1.EResourceType.USER_DETAILS) {
            this.screen_name = args.id;
        }
        else if (resourceType == Resources_1.EResourceType.USER_DETAILS_BY_ID) {
            this.userId = args.id;
        }
        else if (resourceType == Resources_1.EResourceType.USER_FOLLOWERS || resourceType == Resources_1.EResourceType.USER_FOLLOWING) {
            this.userId = args.id;
            this.count = args.count;
            this.cursor = args.cursor;
            this.includePromotedContent = false;
        }
        else if (resourceType == Resources_1.EResourceType.USER_LIKES ||
            resourceType == Resources_1.EResourceType.USER_TWEETS ||
            resourceType == Resources_1.EResourceType.USER_TWEETS_AND_REPLIES) {
            this.userId = args.id;
            this.count = args.count;
            this.cursor = args.cursor;
            this.includePromotedContent = false;
            this.withVoice = false;
        }
    }
    /**
     * @returns The string representation of 'this' object.
     */
    Variables.prototype.toString = function () {
        return JSON.stringify(this);
    };
    return Variables;
}());
exports.Variables = Variables;
/**
 * Media to be sent as payload.
 *
 * @public
 */
var MediaVariable = /** @class */ (function () {
    /* eslint-enable @typescript-eslint/naming-convention */
    /**
     * @param media - The list of MediaArgs objects specifying the media items to be sent in the Tweet.
     */
    function MediaVariable(media) {
        this.media_entities = media.map(function (item) { return new MediaEntityVariable(item); });
        this.possibly_sensitive = false;
    }
    return MediaVariable;
}());
exports.MediaVariable = MediaVariable;
/**
 * Each media item in the media payload.
 *
 * @public
 */
var MediaEntityVariable = /** @class */ (function () {
    /* eslint-enable @typescript-eslint/naming-convention */
    /**
     * @param media - The MediaArgs object specifying the details of the media item to be included in the payload.
     */
    function MediaEntityVariable(media) {
        var _a;
        this.media_id = media.id;
        this.tagged_users = (_a = media.tags) !== null && _a !== void 0 ? _a : [];
    }
    return MediaEntityVariable;
}());
exports.MediaEntityVariable = MediaEntityVariable;
/**
 * Reply specific details to be sent in payload.
 *
 * @public
 */
var ReplyVariable = /** @class */ (function () {
    /* eslint-enable @typescript-eslint/naming-convention */
    /**
     * @param replyTo - The id of the Tweet to which this Tweet is a reply.
     */
    function ReplyVariable(replyTo) {
        this.in_reply_to_tweet_id = replyTo;
        this.exclude_reply_user_ids = [];
    }
    return ReplyVariable;
}());
exports.ReplyVariable = ReplyVariable;
//# sourceMappingURL=Variables.js.map