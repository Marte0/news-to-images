"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Request = void 0;
// PACKAGES
var axios_1 = require("axios");
var form_data_1 = __importDefault(require("form-data"));
var fs_1 = require("fs");
// ENUMS
var Request_1 = require("../enums/Request");
var Resources_1 = require("../enums/Resources");
var DataQuery_1 = require("./queries/DataQuery");
var UploadQuery_1 = require("./queries/UploadQuery");
var FetchArgs_1 = require("./args/FetchArgs");
var PostArgs_1 = require("./args/PostArgs");
/**
 * The request containing all the required url, params, query, payload, etc for a requested resource on Twitter.
 *
 * @public
 */
var Request = /** @class */ (function () {
    /**
     * @param resourceType - The type of resource requested.
     * @param args - Additional URL arguments.
     */
    function Request(resourceType, args) {
        var _a, _b, _c;
        /** The base URL to which the request is targeted. */
        this.base = 'twitter.com';
        // Converting JSON args to object
        if (resourceType == Resources_1.EResourceType.CREATE_RETWEET ||
            resourceType == Resources_1.EResourceType.CREATE_TWEET ||
            resourceType == Resources_1.EResourceType.FAVORITE_TWEET ||
            resourceType == Resources_1.EResourceType.MEDIA_UPLOAD) {
            args = new PostArgs_1.PostArgs(resourceType, args);
        }
        else {
            args = new FetchArgs_1.FetchArgs(resourceType, args);
        }
        // Setting request type
        if (resourceType == Resources_1.EResourceType.CREATE_TWEET ||
            resourceType == Resources_1.EResourceType.CREATE_RETWEET ||
            resourceType == Resources_1.EResourceType.FAVORITE_TWEET ||
            resourceType == Resources_1.EResourceType.MEDIA_UPLOAD) {
            this.type = Request_1.ERequestType.POST;
        }
        else {
            this.type = Request_1.ERequestType.GET;
        }
        // Setting request subdomain
        if (resourceType == Resources_1.EResourceType.MEDIA_UPLOAD) {
            this.subdomain = Resources_1.ESubdomains.UPLOAD;
        }
        else {
            this.subdomain = Resources_1.ESubdomains.MAIN;
        }
        // Setting request endpoint
        if (resourceType == Resources_1.EResourceType.VIDEO_STREAM) {
            this.endpoint = "".concat(resourceType, "/").concat(args.id);
        }
        else {
            this.endpoint = resourceType;
        }
        // Setting request headers
        if (resourceType == Resources_1.EResourceType.MEDIA_UPLOAD) {
            this.headers = new axios_1.AxiosHeaders({ referer: 'https://twitter.com' });
        }
        else {
            this.headers = new axios_1.AxiosHeaders();
        }
        // Setting request params and payload
        if (resourceType == Resources_1.EResourceType.CREATE_TWEET ||
            resourceType == Resources_1.EResourceType.CREATE_RETWEET ||
            resourceType == Resources_1.EResourceType.FAVORITE_TWEET) {
            this.payload = new DataQuery_1.DataQuery(resourceType, args);
        }
        else if (resourceType == Resources_1.EResourceType.MEDIA_UPLOAD && ((_a = args.upload) === null || _a === void 0 ? void 0 : _a.step) == Request_1.EUploadSteps.APPEND) {
            // Appending the media to form data
            var data = new form_data_1.default();
            data.append('media', (0, fs_1.createReadStream)(args.upload.media));
            this.params = new UploadQuery_1.UploadQuery(args.upload);
            this.payload = data;
        }
        else if (resourceType == Resources_1.EResourceType.MEDIA_UPLOAD &&
            (((_b = args.upload) === null || _b === void 0 ? void 0 : _b.step) == Request_1.EUploadSteps.INITIALIZE || ((_c = args.upload) === null || _c === void 0 ? void 0 : _c.step) == Request_1.EUploadSteps.FINALIZE)) {
            this.params = new UploadQuery_1.UploadQuery(args.upload);
        }
        else if (resourceType == Resources_1.EResourceType.VIDEO_STREAM) {
            this.params = undefined;
        }
        else {
            this.params = new DataQuery_1.DataQuery(resourceType, args);
        }
    }
    /**
     * @returns The AxiosRequestConfig representation of 'this' Request.
     */
    Request.prototype.toAxiosRequestConfig = function () {
        return {
            url: this.endpoint,
            method: this.type,
            baseURL: "https://".concat(this.subdomain ? this.subdomain + '.' : '').concat(this.base),
            headers: this.headers,
            params: this.params,
            paramsSerializer: {
                encode: encodeURIComponent,
            },
            data: this.payload,
        };
    };
    return Request;
}());
exports.Request = Request;
//# sourceMappingURL=Request.js.map